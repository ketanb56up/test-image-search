{"version":3,"sources":["helpers/constants.js","helpers/api.js","components/SearchInput/index.jsx","components/ImageView/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Constants","FLICKR_IMAGE_API_KEY","FLICKR_API_URL","API","axios","create","baseURL","fetchFromFlickrApi","url","a","get","useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","textAlign","iconButton","divider","height","margin","SearchInput","props","classes","Paper","component","className","IconButton","aria-label","InputBase","onChange","handleChange","value","placeholder","inputProps","type","onClick","handleSubmit","Divider","orientation","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","icon","color","ImageView","GridList","cellHeight","cols","imageData","map","option","GridListTile","key","id","src","farm","server","secret","alt","ApiKey","App","handleInputChange","e","setState","imageSearched","target","preventDefault","state","data","photos","photo","page","handleMoreImagesClick","showMoreImages","this","length","Button","variant","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29e81308.chunk.js","sourcesContent":["const Constants = {\n  FLICKR_IMAGE_API_KEY: \"3e7cc266ae2b0e0d78e279ce8e361736\",\n  FLICKR_API_URL: \"https://api.flickr.com\",\n};\n\nexport default Constants;\n","import axios from \"axios\";\nimport Constants from \"./constants\";\n\nconst API = axios.create({\n  baseURL: Constants.FLICKR_API_URL,\n});\n\nexport const fetchFromFlickrApi = async (url) => await API.get(url);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 400,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n    textAlign: \"center\",\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nexport default function SearchInput(props) {\n  const classes = useStyles();\n\n  return (\n    <Paper component=\"form\" className={classes.root}>\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        onChange={props.handleChange}\n        value={props.value}\n        placeholder=\"Search Images\"\n        inputProps={{ \"aria-label\": \"search google maps\" }}\n      />\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        aria-label=\"search\"\n        onClick={props.handleSubmit}\n      >\n        <SearchIcon />\n      </IconButton>\n      <Divider className={classes.divider} orientation=\"vertical\" />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport GridList from \"@material-ui/core/GridList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 1280,\n    height: 500,\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\",\n  },\n}));\n\nexport default function ImageView(props) {\n  const classes = useStyles();\n\n  return (\n    <GridList cellHeight={120} className={classes.gridList} cols={4}>\n      {props.imageData.map((option) => (\n        <GridListTile key={option.id}>\n          <img\n            src={`http://farm${option.farm}.static.flickr.com/${option.server}/${option.id}_${option.secret}.jpg`}\n            alt=\"search-img\"\n          />\n        </GridListTile>\n      ))}\n    </GridList>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Constants from \"./helpers/constants\";\nimport { fetchFromFlickrApi } from \"./helpers/api\";\nimport SearchInput from \"./components/SearchInput\";\nimport ImageView from \"./components/ImageView\";\n\nconst ApiKey = Constants.FLICKR_IMAGE_API_KEY;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageSearched: \"\",\n      imageData: [],\n      page: \"\",\n      showMoreImages: false,\n    };\n  }\n\n  handleInputChange = (e) => {\n    this.setState({ imageSearched: e.target.value });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    if (this.state.imageSearched) {\n      const url = `/services/rest/?method=flickr.photos.search&api_key=${ApiKey}&format=json&nojsoncallback=1&safe_search=1&text=${this.state.imageSearched}`;\n      const { data } = await fetchFromFlickrApi(url);\n      if (data.photos) {\n        const imageData = data.photos.photo;\n        const page = data.photos.page;\n        this.setState({\n          imageData: imageData,\n          page: page,\n        });\n      }\n    }\n  };\n\n  handleMoreImagesClick = async (e) => {\n    const { page } = this.state;\n    const url = `/services/rest/?method=flickr.photos.search&api_key=${ApiKey}&format=json&nojsoncallback=1&safe_search=1&text=${\n      this.state.imageSearched\n    }&page=${page + 1}`;\n    const { data } = await fetchFromFlickrApi(url);\n    if (data.photos) {\n      const imageData = data.photos.photo;\n      const page = data.photos.page;\n      this.setState({\n        imageData: [...this.state.imageData, ...imageData],\n        page: page,\n      });\n    }\n  };\n\n  render() {\n    const { imageSearched, imageData, showMoreImages } = this.state;\n    return (\n      <div>\n        <h1 className=\"header\">Image Search</h1>\n        <div className=\"search\">\n          <SearchInput\n            handleChange={this.handleInputChange}\n            handleSubmit={this.handleSubmit}\n            value={imageSearched}\n          />\n        </div>\n        <div className=\"showImageData\">\n          {imageData && <ImageView imageData={imageData} />}\n        </div>\n        <div className=\"button\">\n          {imageData.length !== 0 && !showMoreImages && (\n            <Button\n              variant=\"contained\"\n              onClick={this.handleMoreImagesClick}\n              color=\"primary\"\n              href=\"#contained-buttons\"\n            >\n              More Images\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}